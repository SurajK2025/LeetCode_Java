//Given a string s, find the length of the longest substring without repeating characters.
//
//Example 1:
//Input: s = "abcabcbb"
//Output: 3
//Explanation: The answer is "abc", with the length of 3.

//Example 2:
//Input: s = "bbbbb"
//Output: 1
//Explanation: The answer is "b", with the length of 1.

//Example 3:
//Input: s = "pwwkew"
//Output: 3
//Explanation: The answer is "wke", with the length of 3.
//Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

import java.util.HashSet;
import java.util.Set;

public class Solution {
	public static void main(String[] args) {
		String s = "abcabcbb";
		System.out.println(lengthOfLongestSubstring(s));
	}

    private static int lengthOfLongestSubstring(String s) {
    	int i=0, j=-1;
    	int maxSize = 0;
    	
    	Set<Character> hashSet = new HashSet<>();
    	
    	while(j<s.length()-1) {
    		j++;
    		
    		if(hashSet.contains(s.charAt(j))) {
    			
    			while(s.charAt(i)!=s.charAt(j)) {
    				hashSet.remove(s.charAt(i));
    				i++;
    			}
    			i++;
    		}
    		else {
    			hashSet.add(s.charAt(j));
    		}
    		
    		maxSize = (maxSize < (j-i+1)) ? (j-i+1) : maxSize;
    	}
    	
    	return maxSize;
    }
}