//Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
//Symbol       Value
//I             1
//V             5
//X             10
//L             50
//C             100
//D             500
//M             1000

//For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. 
//The number 27 is written as XXVII, which is XX + V + II.
//Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII.
//Instead, the number four is written as IV. Because the one is before the five we subtract it making four.
//The same principle applies to the number nine, which is written as IX.
//There are six instances where subtraction is used:
//    I can be placed before V (5) and X (10) to make 4 and 9. 
//    X can be placed before L (50) and C (100) to make 40 and 90. 
//    C can be placed before D (500) and M (1000) to make 400 and 900.

//Example 1:
//Input: s = "III"
//Output: 3
//Explanation: III = 3.

//Example 2:
//Input: s = "LVIII"
//Output: 58
//Explanation: L = 50, V= 5, III = 3.

//Example 3:
//Input: s = "MCMXCIV"
//Output: 1994
//Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


import java.util.HashMap;
import java.util.Map;

public class Solution {
	public static void main(String[] args) {
		String s = "MCMXCIV";
		System.out.println(romanToInt(s));
	}
	
    private static int romanToInt(String s) {
        Map<Character, Integer> hashmap = new HashMap<>();
        hashmap.put('I', 1);
        hashmap.put('V', 5);
        hashmap.put('X', 10);
        hashmap.put('L', 50);
        hashmap.put('C', 100);
        hashmap.put('D', 500);
        hashmap.put('M', 1000);
        
        int index = 0;
        int total = 0;
        while(index<s.length()) {
        	if(index<s.length()-1 && hashmap.get(s.charAt(index)) < hashmap.get(s.charAt(index+1))) {
        		total = total + (hashmap.get(s.charAt(index+1)) - hashmap.get(s.charAt(index)));
        		index = index+2;
        	}
        	else {
        		total = total + hashmap.get(s.charAt(index));
        		index = index +1;
        	}
        }
        
        return total;
    }
}