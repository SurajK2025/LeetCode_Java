//Given two integer arrays nums1 and nums2, return an array of their intersection.
//Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

//Example 1:
//Input: nums1 = [1,2,2,1], nums2 = [2,2]
//Output: [2,2]

//Example 2:
//Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
//Output: [4,9]
//Explanation: [9,4] is also accepted.


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Solution {
	public static void main(String[] args) {
		int[] nums1 = {1,2,2,1};
		int[] nums2 = {2,2};
		
		int[] resultArr = intersect(nums1, nums2);
		System.out.println(Arrays.toString(resultArr));
	}
	
	private static int[] intersect(int[] nums1, int[] nums2) {
		int biggerArray[] = nums1.length>=nums2.length?nums1:nums2;
		int smallerArray[] = nums1.length>=nums2.length?nums2:nums1;

		List<Integer> resultList = new ArrayList<>();
		
		Map<Integer, Integer> map = new HashMap<>();
		
		for(int i=0; i<biggerArray.length; i++) {
			if(map.containsKey(biggerArray[i])) {
				map.put(biggerArray[i], map.get(biggerArray[i])+1);
			}
			else {
				map.put(biggerArray[i], 1);
			}
		}
		
		for(int i=0; i<smallerArray.length; i++) {
			if(map.containsKey(smallerArray[i]) && map.get(smallerArray[i]) > 0) {
				resultList.add(smallerArray[i]);
				map.put(smallerArray[i], map.get(smallerArray[i])-1);
			}
		}

		int resultArr[] = new int[resultList.size()];
		for(int i=0; i<resultList.size(); i++) {
			resultArr[i] = resultList.get(i);
		}
		
		return resultArr;
	}
}
