//Given a binary array nums and an integer k, 
//return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

//Example 1:
//Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
//Output: 6
//Explanation: [1,1,1,0,0,1,1,1,1,1,1]
//Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

//Example 2:
//Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
//Output: 10
//Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
//Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

package com.demo;

class Solution {
	public static void main(String[] args) {
		int[] nums = {0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1};
		System.out.println(longestOnes(nums, 3));
	}
	
	private static int longestOnes(int[] nums, int k) {
        int maxCount = 0;
        int count = 0;
        int flips = k;
        int zeroIndex = -1;
        
        for(int i=0; i<nums.length; i++) {
        	if(nums[i] == 1) {
        		count++;
        	}
        	else {
        		if(zeroIndex==-1) zeroIndex=i;
        		
        		if(flips>0) {
        			flips--;
        			count++;
        		}
        		else {
        			if(count>maxCount) maxCount = count;
        			flips = k;
        			count = 0;
        			i = zeroIndex;
        			zeroIndex = -1;
        		}
        	}
        }
        return maxCount>count?maxCount:count;
    }
}