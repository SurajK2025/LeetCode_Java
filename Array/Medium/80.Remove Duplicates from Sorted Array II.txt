//Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice.
//The relative order of the elements should be kept the same.
//Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums.
//More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result.
//It does not matter what you leave beyond the first k elements.
//Return k after placing the final result in the first k slots of nums.
//Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

//Example 1:
//Input: nums = [1,1,1,2,2,3]
//Output: 5, nums = [1,1,2,2,3,_]
//Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
//It does not matter what you leave beyond the returned k (hence they are underscores).

//Example 2:
//Input: nums = [0,0,1,1,1,1,2,3,3]
//Output: 7, nums = [0,0,1,1,2,3,3,_,_]
//Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
//It does not matter what you leave beyond the returned k (hence they are underscores).

import java.util.Arrays;

public class Solution {
	public static void main(String[] args) {
		int[] nums = {0,0,1,1,1,1,2,3,3};
		System.out.println(removeDuplicates(nums));
		System.out.println(Arrays.toString(nums));
	}
	
    private static int removeDuplicates(int[] nums) {
    	int index = 0;
    	int currElement = nums[0];
    	int currElementCount = 0;
    	int resultCount = 0;
    	
    	for(int i=0; i<nums.length; i++) {
    		if(currElement == nums[i]) {
    			currElementCount++;
    		}
    		else {
    			if(currElementCount>=2) {
    				nums[index] = currElement;
    				nums[index+1] = currElement;
    				index = index + 2;
    				resultCount = resultCount + 2;
    			}
    			else {
    				nums[index] = currElement;
    				index++;
    				resultCount++;
    			}
    			currElement = nums[i];
				currElementCount = 1;
    		}
    		
    		if(i==nums.length-1) {
    			if(currElementCount>=2) {
    				nums[index] = currElement;
    				nums[index+1] = currElement;
    				resultCount = resultCount + 2;
    			}
    			else {
    				nums[index] = currElement;
    				resultCount++;
    			}
    		}
    	}
    	return resultCount;
    }
}