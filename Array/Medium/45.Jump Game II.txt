//You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
//Each element nums[i] represents the maximum length of a forward jump from index i.
//Return the minimum number of jumps to reach nums[n - 1].

//Example 1:
//Input: nums = [2,3,1,1,4]
//Output: 2
//Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

//Example 2:
//Input: nums = [2,3,0,1,4]
//Output: 2


public class Solution {
	public static void main(String[] args) {
		int[] nums = {2,3,1,1,4};
		System.out.println(jump(nums));
	}
	
    private static int jump(int[] nums) {
		int index = nums.length-1;
		int count = 0;
		
		while(index!=0) {
			count++;
			int temp = 0;
			for(int i=index-1; i>=0; i--) {
				if( nums[i]>= (index-i) ) {
					temp = i;
				}
				if(i==0) {
					index = temp;
				}
			}
		}

		return count;
    }
}