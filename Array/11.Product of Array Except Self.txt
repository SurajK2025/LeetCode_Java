//Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
//The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
//You must write an algorithm that runs in O(n) time and without using the division operation.

//Example 1:
//Input: nums = [1,2,3,4]
//Output: [24,12,8,6]

//Example 2:
//Input: nums = [-1,1,0,-3,3]
//Output: [0,0,9,0,0]

import java.util.Arrays;

public class Solution {
	public static void main(String[] args) {
		int[] nums = {-1,1,0,-3,3};
		System.out.println(Arrays.toString(productExceptSelf(nums)));
	}
	
	private static int[] productExceptSelf(int[] nums) {
        int[] resultArr = new int[nums.length];
        
        int prefix = 1;
        int suffix = 1;
        
        for(int i=0; i<nums.length; i++) {
        	resultArr[i] = prefix;
        	prefix = prefix * nums[i];
        }
        
        for(int i=nums.length-1; i>=0; i--) {
        	resultArr[i] = resultArr[i] * suffix;
        	suffix = suffix * nums[i];
        }
        
        return resultArr;
    }
}