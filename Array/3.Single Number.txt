//Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

//Example 1:
//Input: nums = [2,2,1]
//Output: 1

//Example 2:
//Input: nums = [4,1,2,1,2]
//Output: 4

//Example 3:
//Input: nums = [1]
//Output: 1

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Tester3 {

	public static void main(String[] args) {
		int nums[] = {4,1,2,1,2};
		System.out.println(singleNumber(nums));
		System.out.println(singleNumber2(nums));
	}
	
	private static int singleNumber(int[] nums) {
		Set<Integer> hashSet = new HashSet<>();
		Map<Integer, Integer> hashMap = new HashMap<>();
		
		for(int i=0; i<nums.length; i++) {
			if(hashSet.add(nums[i])) {
				hashMap.put(nums[i], 1);
			}
			else {
				hashMap.remove(nums[i]);
			}
		}
		return (Integer) hashMap.keySet().toArray()[0];
    }
	
    // The XOR operator (^) has the following properties:
    // 1. a ^ a = 0 (XOR of a number with itself is 0)
    // 2. a ^ 0 = a (XOR of a number with 0 is the number itself)
    // 3. XOR is commutative and associative, so the order of operations doesn't matter.
    // (4^1^2^1^2) Duplicates will get cancelled out, leaving back the unique element.

	private static int singleNumber2(int[] nums) {
        int single_num = nums[0];
        for(int i=1;i<nums.length;i++){
            single_num = single_num ^ nums[i];
        }
        return single_num;
    }
}
